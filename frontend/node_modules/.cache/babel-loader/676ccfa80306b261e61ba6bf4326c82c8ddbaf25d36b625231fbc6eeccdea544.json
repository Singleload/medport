{"ast":null,"code":"import { createApp } from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport store from './store';\nimport './assets/styles/main.scss';\n\n// Add the remixicon CSS globally\nimport 'remixicon/fonts/remixicon.css';\nconst app = createApp(App);\napp.use(store);\napp.use(router);\n\n// Global error handler\napp.config.errorHandler = (err, vm, info) => {\n  console.error('Vue Error:', err);\n  console.error('Info:', info);\n  // Log to server in production\n  if (process.env.NODE_ENV === 'production') {\n    // Send to error tracking service\n  }\n};\n\n// Add a directive for smooth scroll\napp.directive('smooth-scroll', {\n  mounted(el, binding) {\n    el.addEventListener('click', e => {\n      e.preventDefault();\n      const targetId = binding.value || el.getAttribute('href');\n      if (targetId && targetId.startsWith('#')) {\n        const targetElement = document.querySelector(targetId);\n        if (targetElement) {\n          // Smooth scroll to the element\n          targetElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'start'\n          });\n\n          // Update URL hash without scrolling\n          history.pushState(null, null, targetId);\n        }\n      }\n    });\n  }\n});\n\n// Add global methods\napp.config.globalProperties.$formatPrice = price => {\n  return new Intl.NumberFormat('sv-SE').format(price);\n};\n\n// Apply scroll event to handle navbar styling\nlet scrollTimeout;\nwindow.addEventListener('scroll', () => {\n  clearTimeout(scrollTimeout);\n  scrollTimeout = setTimeout(() => {\n    const navbar = document.querySelector('.navbar');\n    if (navbar) {\n      if (window.scrollY > 50) {\n        navbar.classList.add('scrolled');\n      } else {\n        navbar.classList.remove('scrolled');\n      }\n    }\n  }, 100);\n});\napp.mount('#app');","map":{"version":3,"names":["createApp","App","router","store","app","use","config","errorHandler","err","vm","info","console","error","process","env","NODE_ENV","directive","mounted","el","binding","addEventListener","e","preventDefault","targetId","value","getAttribute","startsWith","targetElement","document","querySelector","scrollIntoView","behavior","block","history","pushState","globalProperties","$formatPrice","price","Intl","NumberFormat","format","scrollTimeout","window","clearTimeout","setTimeout","navbar","scrollY","classList","add","remove","mount"],"sources":["/home/dennis/medport/frontend/src/main.js"],"sourcesContent":["import { createApp } from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport store from './store';\nimport './assets/styles/main.scss';\n\n// Add the remixicon CSS globally\nimport 'remixicon/fonts/remixicon.css';\n\nconst app = createApp(App);\n\napp.use(store);\napp.use(router);\n\n// Global error handler\napp.config.errorHandler = (err, vm, info) => {\n  console.error('Vue Error:', err);\n  console.error('Info:', info);\n  // Log to server in production\n  if (process.env.NODE_ENV === 'production') {\n    // Send to error tracking service\n  }\n};\n\n// Add a directive for smooth scroll\napp.directive('smooth-scroll', {\n  mounted(el, binding) {\n    el.addEventListener('click', (e) => {\n      e.preventDefault();\n      const targetId = binding.value || el.getAttribute('href');\n      if (targetId && targetId.startsWith('#')) {\n        const targetElement = document.querySelector(targetId);\n        if (targetElement) {\n          // Smooth scroll to the element\n          targetElement.scrollIntoView({ \n            behavior: 'smooth',\n            block: 'start'\n          });\n          \n          // Update URL hash without scrolling\n          history.pushState(null, null, targetId);\n        }\n      }\n    });\n  }\n});\n\n// Add global methods\napp.config.globalProperties.$formatPrice = (price) => {\n  return new Intl.NumberFormat('sv-SE').format(price);\n};\n\n// Apply scroll event to handle navbar styling\nlet scrollTimeout;\nwindow.addEventListener('scroll', () => {\n  clearTimeout(scrollTimeout);\n  scrollTimeout = setTimeout(() => {\n    const navbar = document.querySelector('.navbar');\n    if (navbar) {\n      if (window.scrollY > 50) {\n        navbar.classList.add('scrolled');\n      } else {\n        navbar.classList.remove('scrolled');\n      }\n    }\n  }, 100);\n});\n\napp.mount('#app');"],"mappings":"AAAA,SAASA,SAAS,QAAQ,KAAK;AAC/B,OAAOC,GAAG,MAAM,WAAW;AAC3B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAO,2BAA2B;;AAElC;AACA,OAAO,+BAA+B;AAEtC,MAAMC,GAAG,GAAGJ,SAAS,CAACC,GAAG,CAAC;AAE1BG,GAAG,CAACC,GAAG,CAACF,KAAK,CAAC;AACdC,GAAG,CAACC,GAAG,CAACH,MAAM,CAAC;;AAEf;AACAE,GAAG,CAACE,MAAM,CAACC,YAAY,GAAG,CAACC,GAAG,EAAEC,EAAE,EAAEC,IAAI,KAAK;EAC3CC,OAAO,CAACC,KAAK,CAAC,YAAY,EAAEJ,GAAG,CAAC;EAChCG,OAAO,CAACC,KAAK,CAAC,OAAO,EAAEF,IAAI,CAAC;EAC5B;EACA,IAAIG,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC;EAAA;AAEJ,CAAC;;AAED;AACAX,GAAG,CAACY,SAAS,CAAC,eAAe,EAAE;EAC7BC,OAAOA,CAACC,EAAE,EAAEC,OAAO,EAAE;IACnBD,EAAE,CAACE,gBAAgB,CAAC,OAAO,EAAGC,CAAC,IAAK;MAClCA,CAAC,CAACC,cAAc,CAAC,CAAC;MAClB,MAAMC,QAAQ,GAAGJ,OAAO,CAACK,KAAK,IAAIN,EAAE,CAACO,YAAY,CAAC,MAAM,CAAC;MACzD,IAAIF,QAAQ,IAAIA,QAAQ,CAACG,UAAU,CAAC,GAAG,CAAC,EAAE;QACxC,MAAMC,aAAa,GAAGC,QAAQ,CAACC,aAAa,CAACN,QAAQ,CAAC;QACtD,IAAII,aAAa,EAAE;UACjB;UACAA,aAAa,CAACG,cAAc,CAAC;YAC3BC,QAAQ,EAAE,QAAQ;YAClBC,KAAK,EAAE;UACT,CAAC,CAAC;;UAEF;UACAC,OAAO,CAACC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAEX,QAAQ,CAAC;QACzC;MACF;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACAnB,GAAG,CAACE,MAAM,CAAC6B,gBAAgB,CAACC,YAAY,GAAIC,KAAK,IAAK;EACpD,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC;AACrD,CAAC;;AAED;AACA,IAAII,aAAa;AACjBC,MAAM,CAACtB,gBAAgB,CAAC,QAAQ,EAAE,MAAM;EACtCuB,YAAY,CAACF,aAAa,CAAC;EAC3BA,aAAa,GAAGG,UAAU,CAAC,MAAM;IAC/B,MAAMC,MAAM,GAAGjB,QAAQ,CAACC,aAAa,CAAC,SAAS,CAAC;IAChD,IAAIgB,MAAM,EAAE;MACV,IAAIH,MAAM,CAACI,OAAO,GAAG,EAAE,EAAE;QACvBD,MAAM,CAACE,SAAS,CAACC,GAAG,CAAC,UAAU,CAAC;MAClC,CAAC,MAAM;QACLH,MAAM,CAACE,SAAS,CAACE,MAAM,CAAC,UAAU,CAAC;MACrC;IACF;EACF,CAAC,EAAE,GAAG,CAAC;AACT,CAAC,CAAC;AAEF7C,GAAG,CAAC8C,KAAK,CAAC,MAAM,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}