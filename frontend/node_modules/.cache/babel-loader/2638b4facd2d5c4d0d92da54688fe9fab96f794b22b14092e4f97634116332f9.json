{"ast":null,"code":"import { ref } from 'vue';\nexport default {\n  name: 'ContactForm',\n  emits: ['form-submitted'],\n  setup(props, {\n    emit\n  }) {\n    const form = ref({\n      name: '',\n      email: '',\n      subject: '',\n      message: '',\n      consent: false\n    });\n    const isSubmitting = ref(false);\n    const formSubmitted = ref(false);\n    const formSuccess = ref(false);\n    const formMessage = ref('');\n    const submitForm = async () => {\n      try {\n        isSubmitting.value = true;\n        formSubmitted.value = false;\n\n        // In a real application, you would send this to the backend\n        // For this implementation, we'll simulate a successful submission\n        await new Promise(resolve => setTimeout(resolve, 1500));\n\n        // Emit event with form data\n        emit('form-submitted', {\n          success: true,\n          data: {\n            ...form.value\n          }\n        });\n\n        // Reset form on success\n        form.value = {\n          name: '',\n          email: '',\n          subject: '',\n          message: '',\n          consent: false\n        };\n        formSuccess.value = true;\n        formMessage.value = 'Tack för ditt meddelande! Vi återkommer till dig så snart som möjligt.';\n        formSubmitted.value = true;\n      } catch (error) {\n        console.error('Contact form submission error:', error);\n\n        // Emit event with error\n        emit('form-submitted', {\n          success: false,\n          error: error.message\n        });\n        formSuccess.value = false;\n        formMessage.value = 'Ett fel uppstod när meddelandet skulle skickas. Försök igen senare.';\n        formSubmitted.value = true;\n      } finally {\n        isSubmitting.value = false;\n      }\n    };\n    return {\n      form,\n      isSubmitting,\n      formSubmitted,\n      formSuccess,\n      formMessage,\n      submitForm\n    };\n  }\n};","map":{"version":3,"names":["ref","name","emits","setup","props","emit","form","email","subject","message","consent","isSubmitting","formSubmitted","formSuccess","formMessage","submitForm","value","Promise","resolve","setTimeout","success","data","error","console"],"sources":["/home/dennis/medport/frontend/src/components/contact/ContactForm.vue"],"sourcesContent":["<template>\n  <div id=\"contact-form\" class=\"contact-form-component\">\n    <form @submit.prevent=\"submitForm\" class=\"contact-form\">\n      <div class=\"form-group\">\n        <label for=\"name\">Namn <span class=\"required\">*</span></label>\n        <input \n          type=\"text\" \n          id=\"name\" \n          v-model=\"form.name\" \n          class=\"form-control\" \n          placeholder=\"Ditt namn\"\n          required\n        >\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"email\">E-post <span class=\"required\">*</span></label>\n        <input \n          type=\"email\" \n          id=\"email\" \n          v-model=\"form.email\" \n          class=\"form-control\"\n          placeholder=\"Din e-postadress\" \n          required\n        >\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"subject\">Ämne <span class=\"required\">*</span></label>\n        <input \n          type=\"text\" \n          id=\"subject\" \n          v-model=\"form.subject\" \n          class=\"form-control\"\n          placeholder=\"Vad gäller ditt meddelande?\" \n          required\n        >\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"message\">Meddelande <span class=\"required\">*</span></label>\n        <textarea \n          id=\"message\" \n          v-model=\"form.message\" \n          class=\"form-control\" \n          rows=\"5\"\n          placeholder=\"Skriv ditt meddelande här...\" \n          required\n        ></textarea>\n      </div>\n      \n      <div class=\"form-group\">\n        <div class=\"form-check\">\n          <input \n            type=\"checkbox\" \n            id=\"consent\" \n            v-model=\"form.consent\" \n            class=\"form-check-input\" \n            required\n          >\n          <label for=\"consent\" class=\"form-check-label\">\n            Jag godkänner att Svensk Hälsovård behandlar mina personuppgifter enligt deras <a href=\"#\" class=\"privacy-link\">integritetspolicy</a>.\n          </label>\n        </div>\n      </div>\n      \n      <div v-if=\"formSubmitted\" class=\"alert\" :class=\"formSuccess ? 'alert-success' : 'alert-danger'\">\n        <div class=\"alert-icon\">\n          <i v-if=\"formSuccess\" class=\"ri-check-line\"></i>\n          <i v-else class=\"ri-error-warning-line\"></i>\n        </div>\n        <div class=\"alert-content\">\n          {{ formMessage }}\n        </div>\n      </div>\n      \n      <div class=\"form-actions\">\n        <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"isSubmitting\">\n          <span v-if=\"isSubmitting\">\n            <i class=\"ri-loader-4-line ri-spin\"></i> Skickar...\n          </span>\n          <span v-else>\n            <i class=\"ri-send-plane-line\"></i> Skicka meddelande\n          </span>\n        </button>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\n\nexport default {\n  name: 'ContactForm',\n  emits: ['form-submitted'],\n  setup(props, { emit }) {\n    const form = ref({\n      name: '',\n      email: '',\n      subject: '',\n      message: '',\n      consent: false\n    });\n    \n    const isSubmitting = ref(false);\n    const formSubmitted = ref(false);\n    const formSuccess = ref(false);\n    const formMessage = ref('');\n    \n    const submitForm = async () => {\n      try {\n        isSubmitting.value = true;\n        formSubmitted.value = false;\n        \n        // In a real application, you would send this to the backend\n        // For this implementation, we'll simulate a successful submission\n        await new Promise(resolve => setTimeout(resolve, 1500));\n        \n        // Emit event with form data\n        emit('form-submitted', {\n          success: true,\n          data: { ...form.value }\n        });\n        \n        // Reset form on success\n        form.value = {\n          name: '',\n          email: '',\n          subject: '',\n          message: '',\n          consent: false\n        };\n        \n        formSuccess.value = true;\n        formMessage.value = 'Tack för ditt meddelande! Vi återkommer till dig så snart som möjligt.';\n        formSubmitted.value = true;\n      } catch (error) {\n        console.error('Contact form submission error:', error);\n        \n        // Emit event with error\n        emit('form-submitted', {\n          success: false,\n          error: error.message\n        });\n        \n        formSuccess.value = false;\n        formMessage.value = 'Ett fel uppstod när meddelandet skulle skickas. Försök igen senare.';\n        formSubmitted.value = true;\n      } finally {\n        isSubmitting.value = false;\n      }\n    };\n    \n    return {\n      form,\n      isSubmitting,\n      formSubmitted,\n      formSuccess,\n      formMessage,\n      submitForm\n    };\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.contact-form-component {\n  .contact-form {\n    background-color: $light;\n    border-radius: $border-radius-lg;\n    box-shadow: $box-shadow;\n    padding: 2rem;\n    \n    .form-group {\n      margin-bottom: 1.5rem;\n      \n      label {\n        display: block;\n        margin-bottom: 0.5rem;\n        font-weight: $font-weight-medium;\n        color: $dark;\n        \n        .required {\n          color: $danger;\n          margin-left: 2px;\n        }\n      }\n      \n      .form-control {\n        width: 100%;\n        padding: 0.75rem 1rem;\n        border: 1px solid #e2e8f0;\n        border-radius: $border-radius;\n        transition: $transition-base;\n        \n        &:focus {\n          border-color: $primary;\n          box-shadow: 0 0 0 3px rgba($primary, 0.15);\n          outline: none;\n        }\n        \n        &::placeholder {\n          color: #a0aec0;\n        }\n      }\n      \n      textarea.form-control {\n        resize: vertical;\n        min-height: 120px;\n      }\n      \n      .form-check {\n        display: flex;\n        align-items: flex-start;\n        \n        .form-check-input {\n          margin-top: 0.3rem;\n          margin-right: 0.75rem;\n          cursor: pointer;\n        }\n        \n        .form-check-label {\n          font-weight: normal;\n          font-size: 0.95rem;\n          color: #4a5568;\n          \n          .privacy-link {\n            color: $primary;\n            text-decoration: underline;\n            transition: $transition-base;\n            \n            &:hover {\n              color: darken($primary, 10%);\n            }\n          }\n        }\n      }\n    }\n    \n    .alert {\n      display: flex;\n      align-items: flex-start;\n      padding: 1.25rem;\n      border-radius: $border-radius;\n      margin-bottom: 1.5rem;\n      \n      .alert-icon {\n        flex-shrink: 0;\n        margin-right: 1rem;\n        font-size: 1.5rem;\n      }\n      \n      &.alert-success {\n        background-color: lighten($success, 45%);\n        border-left: 4px solid $success;\n        \n        .alert-icon {\n          color: $success;\n        }\n        \n        .alert-content {\n          color: darken($success, 20%);\n        }\n      }\n      \n      &.alert-danger {\n        background-color: lighten($danger, 45%);\n        border-left: 4px solid $danger;\n        \n        .alert-icon {\n          color: $danger;\n        }\n        \n        .alert-content {\n          color: darken($danger, 20%);\n        }\n      }\n      \n      animation: fadeIn 0.3s ease-in-out;\n      \n      @keyframes fadeIn {\n        from {\n          opacity: 0;\n          transform: translateY(-10px);\n        }\n        to {\n          opacity: 1;\n          transform: translateY(0);\n        }\n      }\n    }\n    \n    .form-actions {\n      .btn {\n        padding: 0.875rem 2rem;\n        font-weight: $font-weight-medium;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: 0.5rem;\n        box-shadow: $box-shadow;\n        \n        i {\n          font-size: 1.25rem;\n        }\n        \n        &:hover:not(:disabled) {\n          transform: translateY(-3px);\n          box-shadow: $box-shadow-hover;\n        }\n        \n        &:disabled {\n          opacity: 0.7;\n          cursor: not-allowed;\n        }\n      }\n    }\n  }\n}\n</style>"],"mappings":"AA2FA,SAASA,GAAE,QAAS,KAAK;AAEzB,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,KAAK,EAAE,CAAC,gBAAgB,CAAC;EACzBC,KAAKA,CAACC,KAAK,EAAE;IAAEC;EAAK,CAAC,EAAE;IACrB,MAAMC,IAAG,GAAIN,GAAG,CAAC;MACfC,IAAI,EAAE,EAAE;MACRM,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE,EAAE;MACXC,OAAO,EAAE,EAAE;MACXC,OAAO,EAAE;IACX,CAAC,CAAC;IAEF,MAAMC,YAAW,GAAIX,GAAG,CAAC,KAAK,CAAC;IAC/B,MAAMY,aAAY,GAAIZ,GAAG,CAAC,KAAK,CAAC;IAChC,MAAMa,WAAU,GAAIb,GAAG,CAAC,KAAK,CAAC;IAC9B,MAAMc,WAAU,GAAId,GAAG,CAAC,EAAE,CAAC;IAE3B,MAAMe,UAAS,GAAI,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACFJ,YAAY,CAACK,KAAI,GAAI,IAAI;QACzBJ,aAAa,CAACI,KAAI,GAAI,KAAK;;QAE3B;QACA;QACA,MAAM,IAAIC,OAAO,CAACC,OAAM,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;QAEvD;QACAb,IAAI,CAAC,gBAAgB,EAAE;UACrBe,OAAO,EAAE,IAAI;UACbC,IAAI,EAAE;YAAE,GAAGf,IAAI,CAACU;UAAM;QACxB,CAAC,CAAC;;QAEF;QACAV,IAAI,CAACU,KAAI,GAAI;UACXf,IAAI,EAAE,EAAE;UACRM,KAAK,EAAE,EAAE;UACTC,OAAO,EAAE,EAAE;UACXC,OAAO,EAAE,EAAE;UACXC,OAAO,EAAE;QACX,CAAC;QAEDG,WAAW,CAACG,KAAI,GAAI,IAAI;QACxBF,WAAW,CAACE,KAAI,GAAI,wEAAwE;QAC5FJ,aAAa,CAACI,KAAI,GAAI,IAAI;MAC5B,EAAE,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;;QAEtD;QACAjB,IAAI,CAAC,gBAAgB,EAAE;UACrBe,OAAO,EAAE,KAAK;UACdE,KAAK,EAAEA,KAAK,CAACb;QACf,CAAC,CAAC;QAEFI,WAAW,CAACG,KAAI,GAAI,KAAK;QACzBF,WAAW,CAACE,KAAI,GAAI,qEAAqE;QACzFJ,aAAa,CAACI,KAAI,GAAI,IAAI;MAC5B,UAAU;QACRL,YAAY,CAACK,KAAI,GAAI,KAAK;MAC5B;IACF,CAAC;IAED,OAAO;MACLV,IAAI;MACJK,YAAY;MACZC,aAAa;MACbC,WAAW;MACXC,WAAW;MACXC;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}