{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  style: {\n    \"display\": \"none\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" This component doesn't render anything visible in the DOM \")]);\n}","map":{"version":3,"names":["style","_createElementBlock","_hoisted_1","_createCommentVNode"],"sources":["/home/dennis/medport/frontend/src/components/common/SEOHead.vue"],"sourcesContent":["<template>\n    <div style=\"display: none;\">\n    <!-- This component doesn't render anything visible in the DOM -->\n  </div>\n</template>\n  \n  <script>\n  export default {\n    name: 'SEOHead',\n    props: {\n      title: {\n        type: String,\n        required: true\n      },\n      description: {\n        type: String,\n        required: true\n      },\n      keywords: {\n        type: String,\n        default: 'hälsovård, blodprov, hälsokontroll, svensk hälsovård'\n      },\n      author: {\n        type: String,\n        default: 'Svensk Hälsovård'\n      },\n      type: {\n        type: String,\n        default: 'website'\n      },\n      url: {\n        type: String,\n        default: ''\n      },\n      image: {\n        type: String,\n        default: '/assets/images/og-image.jpg'\n      },\n      twitterCard: {\n        type: String,\n        default: 'summary_large_image'\n      },\n      schemaType: {\n        type: String,\n        default: 'WebPage'\n      },\n      schemaData: {\n        type: Object,\n        default: () => ({})\n      }\n    },\n    created() {\n      this.updateMetaTags();\n    },\n    methods: {\n      updateMetaTags() {\n        // Update document title\n        document.title = this.title;\n        \n        // Get existing meta tags\n        //let metaTags = document.querySelectorAll('meta');\n        //let linkTags = document.querySelectorAll('link[rel=\"canonical\"]');\n\n        // Helper function to update or create meta tag\n        const updateOrCreateMetaTag = (name, content, property = null) => {\n          // Check if meta tag exists\n          let metaTag = null;\n          if (name) {\n            metaTag = document.querySelector(`meta[name=\"${name}\"]`);\n          } else if (property) {\n            metaTag = document.querySelector(`meta[property=\"${property}\"]`);\n          }\n          \n          if (metaTag) {\n            // Update existing tag\n            metaTag.setAttribute('content', content);\n          } else {\n            // Create new tag\n            metaTag = document.createElement('meta');\n            if (name) {\n              metaTag.setAttribute('name', name);\n            }\n            if (property) {\n              metaTag.setAttribute('property', property);\n            }\n            metaTag.setAttribute('content', content);\n            document.head.appendChild(metaTag);\n          }\n        };\n        \n        // Update basic meta tags\n        updateOrCreateMetaTag('description', this.description);\n        updateOrCreateMetaTag('keywords', this.keywords);\n        updateOrCreateMetaTag('author', this.author);\n        \n        // Update Open Graph meta tags\n        updateOrCreateMetaTag(null, this.title, 'og:title');\n        updateOrCreateMetaTag(null, this.description, 'og:description');\n        updateOrCreateMetaTag(null, this.type, 'og:type');\n        updateOrCreateMetaTag(null, this.url || window.location.href, 'og:url');\n        updateOrCreateMetaTag(null, this.image, 'og:image');\n        updateOrCreateMetaTag(null, 'sv_SE', 'og:locale');\n        updateOrCreateMetaTag(null, 'Svensk Hälsovård', 'og:site_name');\n        \n        // Update Twitter Card meta tags\n        updateOrCreateMetaTag('twitter:card', this.twitterCard);\n        updateOrCreateMetaTag('twitter:title', this.title);\n        updateOrCreateMetaTag('twitter:description', this.description);\n        updateOrCreateMetaTag('twitter:image', this.image);\n        \n        // Update canonical link\n        let canonicalLink = document.querySelector('link[rel=\"canonical\"]');\n        if (canonicalLink) {\n          canonicalLink.setAttribute('href', this.url || window.location.href);\n        } else {\n          canonicalLink = document.createElement('link');\n          canonicalLink.setAttribute('rel', 'canonical');\n          canonicalLink.setAttribute('href', this.url || window.location.href);\n          document.head.appendChild(canonicalLink);\n        }\n        \n        // Add Schema.org JSON-LD\n        this.updateSchemaOrgData();\n      },\n      \n      updateSchemaOrgData() {\n        // Create schema data object\n        const schema = {\n          '@context': 'https://schema.org',\n          '@type': this.schemaType,\n          name: this.title,\n          description: this.description,\n          url: this.url || window.location.href,\n          ...this.schemaData\n        };\n        \n        // Find existing script tag\n        let scriptTag = document.querySelector('script[type=\"application/ld+json\"]');\n        \n        if (scriptTag) {\n          // Update existing tag\n          scriptTag.textContent = JSON.stringify(schema);\n        } else {\n          // Create new script tag\n          scriptTag = document.createElement('script');\n          scriptTag.setAttribute('type', 'application/ld+json');\n          scriptTag.textContent = JSON.stringify(schema);\n          document.head.appendChild(scriptTag);\n        }\n      }\n    }\n  };\n  </script>"],"mappings":";;EACSA,KAAsB,EAAtB;IAAA;EAAA;AAAsB;;uBAA3BC,mBAAA,CAEI,OAFJC,UAEI,GADJC,mBAAA,+DAAkE,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}