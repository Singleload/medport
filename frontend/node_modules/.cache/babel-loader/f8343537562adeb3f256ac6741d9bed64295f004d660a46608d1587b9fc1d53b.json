{"ast":null,"code":"export default {\n  name: 'SEOHead',\n  props: {\n    title: {\n      type: String,\n      required: true\n    },\n    description: {\n      type: String,\n      required: true\n    },\n    keywords: {\n      type: String,\n      default: 'hälsovård, blodprov, hälsokontroll, svensk hälsovård'\n    },\n    author: {\n      type: String,\n      default: 'Svensk Hälsovård'\n    },\n    type: {\n      type: String,\n      default: 'website'\n    },\n    url: {\n      type: String,\n      default: ''\n    },\n    image: {\n      type: String,\n      default: '/assets/images/og-image.jpg'\n    },\n    twitterCard: {\n      type: String,\n      default: 'summary_large_image'\n    },\n    schemaType: {\n      type: String,\n      default: 'WebPage'\n    },\n    schemaData: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  created() {\n    this.updateMetaTags();\n  },\n  methods: {\n    updateMetaTags() {\n      // Update document title\n      document.title = this.title;\n\n      // Get existing meta tags\n      let metaTags = document.querySelectorAll('meta');\n      let linkTags = document.querySelectorAll('link[rel=\"canonical\"]');\n      console.log(`Found ${metaTags.length} meta tags and ${linkTags.length} link tags`);\n\n      // Helper function to update or create meta tag\n      const updateOrCreateMetaTag = (name, content, property = null) => {\n        // Check if meta tag exists\n        let metaTag = null;\n        if (name) {\n          metaTag = document.querySelector(`meta[name=\"${name}\"]`);\n        } else if (property) {\n          metaTag = document.querySelector(`meta[property=\"${property}\"]`);\n        }\n        if (metaTag) {\n          // Update existing tag\n          metaTag.setAttribute('content', content);\n        } else {\n          // Create new tag\n          metaTag = document.createElement('meta');\n          if (name) {\n            metaTag.setAttribute('name', name);\n          }\n          if (property) {\n            metaTag.setAttribute('property', property);\n          }\n          metaTag.setAttribute('content', content);\n          document.head.appendChild(metaTag);\n        }\n      };\n\n      // Update basic meta tags\n      updateOrCreateMetaTag('description', this.description);\n      updateOrCreateMetaTag('keywords', this.keywords);\n      updateOrCreateMetaTag('author', this.author);\n\n      // Update Open Graph meta tags\n      updateOrCreateMetaTag(null, this.title, 'og:title');\n      updateOrCreateMetaTag(null, this.description, 'og:description');\n      updateOrCreateMetaTag(null, this.type, 'og:type');\n      updateOrCreateMetaTag(null, this.url || window.location.href, 'og:url');\n      updateOrCreateMetaTag(null, this.image, 'og:image');\n      updateOrCreateMetaTag(null, 'sv_SE', 'og:locale');\n      updateOrCreateMetaTag(null, 'Svensk Hälsovård', 'og:site_name');\n\n      // Update Twitter Card meta tags\n      updateOrCreateMetaTag('twitter:card', this.twitterCard);\n      updateOrCreateMetaTag('twitter:title', this.title);\n      updateOrCreateMetaTag('twitter:description', this.description);\n      updateOrCreateMetaTag('twitter:image', this.image);\n\n      // Update canonical link\n      let canonicalLink = document.querySelector('link[rel=\"canonical\"]');\n      if (canonicalLink) {\n        canonicalLink.setAttribute('href', this.url || window.location.href);\n      } else {\n        canonicalLink = document.createElement('link');\n        canonicalLink.setAttribute('rel', 'canonical');\n        canonicalLink.setAttribute('href', this.url || window.location.href);\n        document.head.appendChild(canonicalLink);\n      }\n\n      // Add Schema.org JSON-LD\n      this.updateSchemaOrgData();\n    },\n    updateSchemaOrgData() {\n      // Create schema data object\n      const schema = {\n        '@context': 'https://schema.org',\n        '@type': this.schemaType,\n        name: this.title,\n        description: this.description,\n        url: this.url || window.location.href,\n        ...this.schemaData\n      };\n\n      // Find existing script tag\n      let scriptTag = document.querySelector('script[type=\"application/ld+json\"]');\n      if (scriptTag) {\n        // Update existing tag\n        scriptTag.textContent = JSON.stringify(schema);\n      } else {\n        // Create new script tag\n        scriptTag = document.createElement('script');\n        scriptTag.setAttribute('type', 'application/ld+json');\n        scriptTag.textContent = JSON.stringify(schema);\n        document.head.appendChild(scriptTag);\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","props","title","type","String","required","description","keywords","default","author","url","image","twitterCard","schemaType","schemaData","Object","created","updateMetaTags","methods","document","metaTags","querySelectorAll","linkTags","console","log","length","updateOrCreateMetaTag","content","property","metaTag","querySelector","setAttribute","createElement","head","appendChild","window","location","href","canonicalLink","updateSchemaOrgData","schema","scriptTag","textContent","JSON","stringify"],"sources":["/home/dennis/medport/frontend/src/components/common/SEOHead.vue"],"sourcesContent":["<template>\n    <div style=\"display: none;\">\n    <!-- This component doesn't render anything visible in the DOM -->\n  </div>\n</template>\n  \n  <script>\n  export default {\n    name: 'SEOHead',\n    props: {\n      title: {\n        type: String,\n        required: true\n      },\n      description: {\n        type: String,\n        required: true\n      },\n      keywords: {\n        type: String,\n        default: 'hälsovård, blodprov, hälsokontroll, svensk hälsovård'\n      },\n      author: {\n        type: String,\n        default: 'Svensk Hälsovård'\n      },\n      type: {\n        type: String,\n        default: 'website'\n      },\n      url: {\n        type: String,\n        default: ''\n      },\n      image: {\n        type: String,\n        default: '/assets/images/og-image.jpg'\n      },\n      twitterCard: {\n        type: String,\n        default: 'summary_large_image'\n      },\n      schemaType: {\n        type: String,\n        default: 'WebPage'\n      },\n      schemaData: {\n        type: Object,\n        default: () => ({})\n      }\n    },\n    created() {\n      this.updateMetaTags();\n    },\n    methods: {\n      updateMetaTags() {\n        // Update document title\n        document.title = this.title;\n        \n        // Get existing meta tags\n        let metaTags = document.querySelectorAll('meta');\n        let linkTags = document.querySelectorAll('link[rel=\"canonical\"]');\n        \n        console.log(`Found ${metaTags.length} meta tags and ${linkTags.length} link tags`);\n\n        // Helper function to update or create meta tag\n        const updateOrCreateMetaTag = (name, content, property = null) => {\n          // Check if meta tag exists\n          let metaTag = null;\n          if (name) {\n            metaTag = document.querySelector(`meta[name=\"${name}\"]`);\n          } else if (property) {\n            metaTag = document.querySelector(`meta[property=\"${property}\"]`);\n          }\n          \n          if (metaTag) {\n            // Update existing tag\n            metaTag.setAttribute('content', content);\n          } else {\n            // Create new tag\n            metaTag = document.createElement('meta');\n            if (name) {\n              metaTag.setAttribute('name', name);\n            }\n            if (property) {\n              metaTag.setAttribute('property', property);\n            }\n            metaTag.setAttribute('content', content);\n            document.head.appendChild(metaTag);\n          }\n        };\n        \n        // Update basic meta tags\n        updateOrCreateMetaTag('description', this.description);\n        updateOrCreateMetaTag('keywords', this.keywords);\n        updateOrCreateMetaTag('author', this.author);\n        \n        // Update Open Graph meta tags\n        updateOrCreateMetaTag(null, this.title, 'og:title');\n        updateOrCreateMetaTag(null, this.description, 'og:description');\n        updateOrCreateMetaTag(null, this.type, 'og:type');\n        updateOrCreateMetaTag(null, this.url || window.location.href, 'og:url');\n        updateOrCreateMetaTag(null, this.image, 'og:image');\n        updateOrCreateMetaTag(null, 'sv_SE', 'og:locale');\n        updateOrCreateMetaTag(null, 'Svensk Hälsovård', 'og:site_name');\n        \n        // Update Twitter Card meta tags\n        updateOrCreateMetaTag('twitter:card', this.twitterCard);\n        updateOrCreateMetaTag('twitter:title', this.title);\n        updateOrCreateMetaTag('twitter:description', this.description);\n        updateOrCreateMetaTag('twitter:image', this.image);\n        \n        // Update canonical link\n        let canonicalLink = document.querySelector('link[rel=\"canonical\"]');\n        if (canonicalLink) {\n          canonicalLink.setAttribute('href', this.url || window.location.href);\n        } else {\n          canonicalLink = document.createElement('link');\n          canonicalLink.setAttribute('rel', 'canonical');\n          canonicalLink.setAttribute('href', this.url || window.location.href);\n          document.head.appendChild(canonicalLink);\n        }\n        \n        // Add Schema.org JSON-LD\n        this.updateSchemaOrgData();\n      },\n      \n      updateSchemaOrgData() {\n        // Create schema data object\n        const schema = {\n          '@context': 'https://schema.org',\n          '@type': this.schemaType,\n          name: this.title,\n          description: this.description,\n          url: this.url || window.location.href,\n          ...this.schemaData\n        };\n        \n        // Find existing script tag\n        let scriptTag = document.querySelector('script[type=\"application/ld+json\"]');\n        \n        if (scriptTag) {\n          // Update existing tag\n          scriptTag.textContent = JSON.stringify(schema);\n        } else {\n          // Create new script tag\n          scriptTag = document.createElement('script');\n          scriptTag.setAttribute('type', 'application/ld+json');\n          scriptTag.textContent = JSON.stringify(schema);\n          document.head.appendChild(scriptTag);\n        }\n      }\n    }\n  };\n  </script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}