{"ast":null,"code":"import api from '@/services/api';\nimport checkoutService from '@/services/checkout';\nexport default {\n  namespaced: true,\n  state: {\n    customer: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: '',\n      streetAddress: '',\n      postalCode: '',\n      city: ''\n    },\n    payment: {\n      status: null,\n      // null, 'pending', 'success', 'failed'\n      paymentId: null,\n      errorMessage: null\n    },\n    booking: {\n      status: null,\n      // null, 'pending', 'confirmed', 'failed'\n      bookingId: null,\n      errorMessage: null\n    }\n  },\n  mutations: {\n    UPDATE_CUSTOMER(state, customerData) {\n      state.customer = {\n        ...state.customer,\n        ...customerData\n      };\n    },\n    SET_PAYMENT_STATUS(state, status) {\n      state.payment.status = status;\n    },\n    SET_PAYMENT_ID(state, paymentId) {\n      state.payment.paymentId = paymentId;\n    },\n    SET_PAYMENT_ERROR(state, errorMessage) {\n      state.payment.errorMessage = errorMessage;\n    },\n    SET_BOOKING_STATUS(state, status) {\n      state.booking.status = status;\n    },\n    SET_BOOKING_ID(state, bookingId) {\n      state.booking.bookingId = bookingId;\n    },\n    SET_BOOKING_ERROR(state, errorMessage) {\n      state.booking.errorMessage = errorMessage;\n    },\n    RESET_CHECKOUT(state) {\n      state.payment = {\n        status: null,\n        paymentId: null,\n        errorMessage: null\n      };\n      state.booking = {\n        status: null,\n        bookingId: null,\n        errorMessage: null\n      };\n    }\n  },\n  actions: {\n    updateCustomer({\n      commit\n    }, customerData) {\n      commit('UPDATE_CUSTOMER', customerData);\n    },\n    async initiateCheckout({\n      commit,\n      state,\n      rootGetters\n    }) {\n      try {\n        // Set payment status to pending\n        commit('SET_PAYMENT_STATUS', 'pending');\n\n        // Prepare checkout data\n        const checkoutData = {\n          customer: state.customer,\n          items: rootGetters['cart/cartItems'].map(item => ({\n            serviceId: item.service.id,\n            quantity: item.quantity,\n            purchaseType: item.purchaseType,\n            price: item.service.discountedPrice || item.service.price\n          })),\n          totalAmount: rootGetters['cart/cartTotal']\n        };\n\n        // Send checkout request to the backend\n        const response = await checkoutService.initiateCheckout(checkoutData);\n\n        // Set payment ID from response\n        commit('SET_PAYMENT_ID', response.paymentId);\n        return response;\n      } catch (error) {\n        commit('SET_PAYMENT_STATUS', 'failed');\n        commit('SET_PAYMENT_ERROR', error.message || 'Ett fel uppstod vid betalningsförsöket');\n        throw error;\n      }\n    },\n    async processPayment({\n      commit,\n      state,\n      dispatch\n    }, paymentDetails) {\n      try {\n        // Process payment\n        const response = await checkoutService.processPayment({\n          paymentId: state.payment.paymentId,\n          ...paymentDetails\n        });\n\n        // Update payment status\n        commit('SET_PAYMENT_STATUS', 'success');\n\n        // Create booking\n        await dispatch('createBooking');\n        return response;\n      } catch (error) {\n        commit('SET_PAYMENT_STATUS', 'failed');\n        commit('SET_PAYMENT_ERROR', error.message || 'Ett fel uppstod vid betalningen');\n        throw error;\n      }\n    },\n    async createBooking({\n      commit,\n      state,\n      rootGetters,\n      dispatch\n    }) {\n      try {\n        // Set booking status to pending\n        commit('SET_BOOKING_STATUS', 'pending');\n\n        // Prepare booking data\n        const bookingData = {\n          paymentId: state.payment.paymentId,\n          customer: state.customer,\n          items: rootGetters['cart/cartItems'].map(item => ({\n            serviceId: item.service.id,\n            quantity: item.quantity,\n            purchaseType: item.purchaseType\n          }))\n        };\n\n        // Send booking request to backend\n        const response = await api.post('/api/bookings', bookingData);\n\n        // Update booking status and ID\n        commit('SET_BOOKING_STATUS', 'confirmed');\n        commit('SET_BOOKING_ID', response.data.bookingId);\n\n        // Clear cart after successful booking\n        dispatch('cart/clearCart', null, {\n          root: true\n        });\n        return response.data;\n      } catch (error) {\n        commit('SET_BOOKING_STATUS', 'failed');\n        commit('SET_BOOKING_ERROR', error.message || 'Ett fel uppstod vid bokningen');\n        throw error;\n      }\n    },\n    resetCheckout({\n      commit\n    }) {\n      commit('RESET_CHECKOUT');\n    }\n  },\n  getters: {\n    customer: state => state.customer,\n    paymentStatus: state => state.payment.status,\n    paymentId: state => state.payment.paymentId,\n    paymentError: state => state.payment.errorMessage,\n    bookingStatus: state => state.booking.status,\n    bookingId: state => state.booking.bookingId,\n    bookingError: state => state.booking.errorMessage,\n    isCheckoutComplete: state => state.booking.status === 'confirmed'\n  }\n};","map":{"version":3,"names":["api","checkoutService","namespaced","state","customer","firstName","lastName","email","phone","streetAddress","postalCode","city","payment","status","paymentId","errorMessage","booking","bookingId","mutations","UPDATE_CUSTOMER","customerData","SET_PAYMENT_STATUS","SET_PAYMENT_ID","SET_PAYMENT_ERROR","SET_BOOKING_STATUS","SET_BOOKING_ID","SET_BOOKING_ERROR","RESET_CHECKOUT","actions","updateCustomer","commit","initiateCheckout","rootGetters","checkoutData","items","map","item","serviceId","service","id","quantity","purchaseType","price","discountedPrice","totalAmount","response","error","message","processPayment","dispatch","paymentDetails","createBooking","bookingData","post","data","root","resetCheckout","getters","paymentStatus","paymentError","bookingStatus","bookingError","isCheckoutComplete"],"sources":["/home/dennis/medport/frontend/src/store/modules/checkout.js"],"sourcesContent":["import api from '@/services/api';\nimport checkoutService from '@/services/checkout';\n\nexport default {\n  namespaced: true,\n  state: {\n    customer: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: '',\n      streetAddress: '',\n      postalCode: '',\n      city: ''\n    },\n    payment: {\n      status: null, // null, 'pending', 'success', 'failed'\n      paymentId: null,\n      errorMessage: null\n    },\n    booking: {\n      status: null, // null, 'pending', 'confirmed', 'failed'\n      bookingId: null,\n      errorMessage: null\n    }\n  },\n  mutations: {\n    UPDATE_CUSTOMER(state, customerData) {\n      state.customer = { ...state.customer, ...customerData };\n    },\n    SET_PAYMENT_STATUS(state, status) {\n      state.payment.status = status;\n    },\n    SET_PAYMENT_ID(state, paymentId) {\n      state.payment.paymentId = paymentId;\n    },\n    SET_PAYMENT_ERROR(state, errorMessage) {\n      state.payment.errorMessage = errorMessage;\n    },\n    SET_BOOKING_STATUS(state, status) {\n      state.booking.status = status;\n    },\n    SET_BOOKING_ID(state, bookingId) {\n      state.booking.bookingId = bookingId;\n    },\n    SET_BOOKING_ERROR(state, errorMessage) {\n      state.booking.errorMessage = errorMessage;\n    },\n    RESET_CHECKOUT(state) {\n      state.payment = {\n        status: null,\n        paymentId: null,\n        errorMessage: null\n      };\n      state.booking = {\n        status: null,\n        bookingId: null,\n        errorMessage: null\n      };\n    }\n  },\n  actions: {\n    updateCustomer({ commit }, customerData) {\n      commit('UPDATE_CUSTOMER', customerData);\n    },\n    async initiateCheckout({ commit, state, rootGetters }) {\n      try {\n        // Set payment status to pending\n        commit('SET_PAYMENT_STATUS', 'pending');\n        \n        // Prepare checkout data\n        const checkoutData = {\n          customer: state.customer,\n          items: rootGetters['cart/cartItems'].map(item => ({\n            serviceId: item.service.id,\n            quantity: item.quantity,\n            purchaseType: item.purchaseType,\n            price: item.service.discountedPrice || item.service.price\n          })),\n          totalAmount: rootGetters['cart/cartTotal']\n        };\n        \n        // Send checkout request to the backend\n        const response = await checkoutService.initiateCheckout(checkoutData);\n        \n        // Set payment ID from response\n        commit('SET_PAYMENT_ID', response.paymentId);\n        \n        return response;\n      } catch (error) {\n        commit('SET_PAYMENT_STATUS', 'failed');\n        commit('SET_PAYMENT_ERROR', error.message || 'Ett fel uppstod vid betalningsförsöket');\n        throw error;\n      }\n    },\n    async processPayment({ commit, state, dispatch }, paymentDetails) {\n      try {\n        // Process payment\n        const response = await checkoutService.processPayment({\n          paymentId: state.payment.paymentId,\n          ...paymentDetails\n        });\n        \n        // Update payment status\n        commit('SET_PAYMENT_STATUS', 'success');\n        \n        // Create booking\n        await dispatch('createBooking');\n        \n        return response;\n      } catch (error) {\n        commit('SET_PAYMENT_STATUS', 'failed');\n        commit('SET_PAYMENT_ERROR', error.message || 'Ett fel uppstod vid betalningen');\n        throw error;\n      }\n    },\n    async createBooking({ commit, state, rootGetters, dispatch }) {\n      try {\n        // Set booking status to pending\n        commit('SET_BOOKING_STATUS', 'pending');\n        \n        // Prepare booking data\n        const bookingData = {\n          paymentId: state.payment.paymentId,\n          customer: state.customer,\n          items: rootGetters['cart/cartItems'].map(item => ({\n            serviceId: item.service.id,\n            quantity: item.quantity,\n            purchaseType: item.purchaseType\n          }))\n        };\n        \n        // Send booking request to backend\n        const response = await api.post('/api/bookings', bookingData);\n        \n        // Update booking status and ID\n        commit('SET_BOOKING_STATUS', 'confirmed');\n        commit('SET_BOOKING_ID', response.data.bookingId);\n        \n        // Clear cart after successful booking\n        dispatch('cart/clearCart', null, { root: true });\n        \n        return response.data;\n      } catch (error) {\n        commit('SET_BOOKING_STATUS', 'failed');\n        commit('SET_BOOKING_ERROR', error.message || 'Ett fel uppstod vid bokningen');\n        throw error;\n      }\n    },\n    resetCheckout({ commit }) {\n      commit('RESET_CHECKOUT');\n    }\n  },\n  getters: {\n    customer: state => state.customer,\n    paymentStatus: state => state.payment.status,\n    paymentId: state => state.payment.paymentId,\n    paymentError: state => state.payment.errorMessage,\n    bookingStatus: state => state.booking.status,\n    bookingId: state => state.booking.bookingId,\n    bookingError: state => state.booking.errorMessage,\n    isCheckoutComplete: state => state.booking.status === 'confirmed'\n  }\n};"],"mappings":"AAAA,OAAOA,GAAG,MAAM,gBAAgB;AAChC,OAAOC,eAAe,MAAM,qBAAqB;AAEjD,eAAe;EACbC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAE;IACLC,QAAQ,EAAE;MACRC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE,EAAE;MACTC,aAAa,EAAE,EAAE;MACjBC,UAAU,EAAE,EAAE;MACdC,IAAI,EAAE;IACR,CAAC;IACDC,OAAO,EAAE;MACPC,MAAM,EAAE,IAAI;MAAE;MACdC,SAAS,EAAE,IAAI;MACfC,YAAY,EAAE;IAChB,CAAC;IACDC,OAAO,EAAE;MACPH,MAAM,EAAE,IAAI;MAAE;MACdI,SAAS,EAAE,IAAI;MACfF,YAAY,EAAE;IAChB;EACF,CAAC;EACDG,SAAS,EAAE;IACTC,eAAeA,CAAChB,KAAK,EAAEiB,YAAY,EAAE;MACnCjB,KAAK,CAACC,QAAQ,GAAG;QAAE,GAAGD,KAAK,CAACC,QAAQ;QAAE,GAAGgB;MAAa,CAAC;IACzD,CAAC;IACDC,kBAAkBA,CAAClB,KAAK,EAAEU,MAAM,EAAE;MAChCV,KAAK,CAACS,OAAO,CAACC,MAAM,GAAGA,MAAM;IAC/B,CAAC;IACDS,cAAcA,CAACnB,KAAK,EAAEW,SAAS,EAAE;MAC/BX,KAAK,CAACS,OAAO,CAACE,SAAS,GAAGA,SAAS;IACrC,CAAC;IACDS,iBAAiBA,CAACpB,KAAK,EAAEY,YAAY,EAAE;MACrCZ,KAAK,CAACS,OAAO,CAACG,YAAY,GAAGA,YAAY;IAC3C,CAAC;IACDS,kBAAkBA,CAACrB,KAAK,EAAEU,MAAM,EAAE;MAChCV,KAAK,CAACa,OAAO,CAACH,MAAM,GAAGA,MAAM;IAC/B,CAAC;IACDY,cAAcA,CAACtB,KAAK,EAAEc,SAAS,EAAE;MAC/Bd,KAAK,CAACa,OAAO,CAACC,SAAS,GAAGA,SAAS;IACrC,CAAC;IACDS,iBAAiBA,CAACvB,KAAK,EAAEY,YAAY,EAAE;MACrCZ,KAAK,CAACa,OAAO,CAACD,YAAY,GAAGA,YAAY;IAC3C,CAAC;IACDY,cAAcA,CAACxB,KAAK,EAAE;MACpBA,KAAK,CAACS,OAAO,GAAG;QACdC,MAAM,EAAE,IAAI;QACZC,SAAS,EAAE,IAAI;QACfC,YAAY,EAAE;MAChB,CAAC;MACDZ,KAAK,CAACa,OAAO,GAAG;QACdH,MAAM,EAAE,IAAI;QACZI,SAAS,EAAE,IAAI;QACfF,YAAY,EAAE;MAChB,CAAC;IACH;EACF,CAAC;EACDa,OAAO,EAAE;IACPC,cAAcA,CAAC;MAAEC;IAAO,CAAC,EAAEV,YAAY,EAAE;MACvCU,MAAM,CAAC,iBAAiB,EAAEV,YAAY,CAAC;IACzC,CAAC;IACD,MAAMW,gBAAgBA,CAAC;MAAED,MAAM;MAAE3B,KAAK;MAAE6B;IAAY,CAAC,EAAE;MACrD,IAAI;QACF;QACAF,MAAM,CAAC,oBAAoB,EAAE,SAAS,CAAC;;QAEvC;QACA,MAAMG,YAAY,GAAG;UACnB7B,QAAQ,EAAED,KAAK,CAACC,QAAQ;UACxB8B,KAAK,EAAEF,WAAW,CAAC,gBAAgB,CAAC,CAACG,GAAG,CAACC,IAAI,KAAK;YAChDC,SAAS,EAAED,IAAI,CAACE,OAAO,CAACC,EAAE;YAC1BC,QAAQ,EAAEJ,IAAI,CAACI,QAAQ;YACvBC,YAAY,EAAEL,IAAI,CAACK,YAAY;YAC/BC,KAAK,EAAEN,IAAI,CAACE,OAAO,CAACK,eAAe,IAAIP,IAAI,CAACE,OAAO,CAACI;UACtD,CAAC,CAAC,CAAC;UACHE,WAAW,EAAEZ,WAAW,CAAC,gBAAgB;QAC3C,CAAC;;QAED;QACA,MAAMa,QAAQ,GAAG,MAAM5C,eAAe,CAAC8B,gBAAgB,CAACE,YAAY,CAAC;;QAErE;QACAH,MAAM,CAAC,gBAAgB,EAAEe,QAAQ,CAAC/B,SAAS,CAAC;QAE5C,OAAO+B,QAAQ;MACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdhB,MAAM,CAAC,oBAAoB,EAAE,QAAQ,CAAC;QACtCA,MAAM,CAAC,mBAAmB,EAAEgB,KAAK,CAACC,OAAO,IAAI,wCAAwC,CAAC;QACtF,MAAMD,KAAK;MACb;IACF,CAAC;IACD,MAAME,cAAcA,CAAC;MAAElB,MAAM;MAAE3B,KAAK;MAAE8C;IAAS,CAAC,EAAEC,cAAc,EAAE;MAChE,IAAI;QACF;QACA,MAAML,QAAQ,GAAG,MAAM5C,eAAe,CAAC+C,cAAc,CAAC;UACpDlC,SAAS,EAAEX,KAAK,CAACS,OAAO,CAACE,SAAS;UAClC,GAAGoC;QACL,CAAC,CAAC;;QAEF;QACApB,MAAM,CAAC,oBAAoB,EAAE,SAAS,CAAC;;QAEvC;QACA,MAAMmB,QAAQ,CAAC,eAAe,CAAC;QAE/B,OAAOJ,QAAQ;MACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdhB,MAAM,CAAC,oBAAoB,EAAE,QAAQ,CAAC;QACtCA,MAAM,CAAC,mBAAmB,EAAEgB,KAAK,CAACC,OAAO,IAAI,iCAAiC,CAAC;QAC/E,MAAMD,KAAK;MACb;IACF,CAAC;IACD,MAAMK,aAAaA,CAAC;MAAErB,MAAM;MAAE3B,KAAK;MAAE6B,WAAW;MAAEiB;IAAS,CAAC,EAAE;MAC5D,IAAI;QACF;QACAnB,MAAM,CAAC,oBAAoB,EAAE,SAAS,CAAC;;QAEvC;QACA,MAAMsB,WAAW,GAAG;UAClBtC,SAAS,EAAEX,KAAK,CAACS,OAAO,CAACE,SAAS;UAClCV,QAAQ,EAAED,KAAK,CAACC,QAAQ;UACxB8B,KAAK,EAAEF,WAAW,CAAC,gBAAgB,CAAC,CAACG,GAAG,CAACC,IAAI,KAAK;YAChDC,SAAS,EAAED,IAAI,CAACE,OAAO,CAACC,EAAE;YAC1BC,QAAQ,EAAEJ,IAAI,CAACI,QAAQ;YACvBC,YAAY,EAAEL,IAAI,CAACK;UACrB,CAAC,CAAC;QACJ,CAAC;;QAED;QACA,MAAMI,QAAQ,GAAG,MAAM7C,GAAG,CAACqD,IAAI,CAAC,eAAe,EAAED,WAAW,CAAC;;QAE7D;QACAtB,MAAM,CAAC,oBAAoB,EAAE,WAAW,CAAC;QACzCA,MAAM,CAAC,gBAAgB,EAAEe,QAAQ,CAACS,IAAI,CAACrC,SAAS,CAAC;;QAEjD;QACAgC,QAAQ,CAAC,gBAAgB,EAAE,IAAI,EAAE;UAAEM,IAAI,EAAE;QAAK,CAAC,CAAC;QAEhD,OAAOV,QAAQ,CAACS,IAAI;MACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;QACdhB,MAAM,CAAC,oBAAoB,EAAE,QAAQ,CAAC;QACtCA,MAAM,CAAC,mBAAmB,EAAEgB,KAAK,CAACC,OAAO,IAAI,+BAA+B,CAAC;QAC7E,MAAMD,KAAK;MACb;IACF,CAAC;IACDU,aAAaA,CAAC;MAAE1B;IAAO,CAAC,EAAE;MACxBA,MAAM,CAAC,gBAAgB,CAAC;IAC1B;EACF,CAAC;EACD2B,OAAO,EAAE;IACPrD,QAAQ,EAAED,KAAK,IAAIA,KAAK,CAACC,QAAQ;IACjCsD,aAAa,EAAEvD,KAAK,IAAIA,KAAK,CAACS,OAAO,CAACC,MAAM;IAC5CC,SAAS,EAAEX,KAAK,IAAIA,KAAK,CAACS,OAAO,CAACE,SAAS;IAC3C6C,YAAY,EAAExD,KAAK,IAAIA,KAAK,CAACS,OAAO,CAACG,YAAY;IACjD6C,aAAa,EAAEzD,KAAK,IAAIA,KAAK,CAACa,OAAO,CAACH,MAAM;IAC5CI,SAAS,EAAEd,KAAK,IAAIA,KAAK,CAACa,OAAO,CAACC,SAAS;IAC3C4C,YAAY,EAAE1D,KAAK,IAAIA,KAAK,CAACa,OAAO,CAACD,YAAY;IACjD+C,kBAAkB,EAAE3D,KAAK,IAAIA,KAAK,CAACa,OAAO,CAACH,MAAM,KAAK;EACxD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}