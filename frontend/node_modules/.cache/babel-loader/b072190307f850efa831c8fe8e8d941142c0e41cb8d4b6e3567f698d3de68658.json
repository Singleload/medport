{"ast":null,"code":"export default {\n  namespaced: true,\n  state: {\n    items: []\n  },\n  mutations: {\n    ADD_TO_CART(state, payload) {\n      const {\n        service,\n        purchaseType\n      } = payload;\n\n      // Check if item already exists in cart\n      const existingItemIndex = state.items.findIndex(item => item.service.id === service.id && item.purchaseType === purchaseType);\n      if (existingItemIndex !== -1) {\n        // Update quantity if item exists\n        state.items[existingItemIndex].quantity += 1;\n      } else {\n        // Add new item if it doesn't exist\n        state.items.push({\n          id: Date.now(),\n          // Unique ID for cart item\n          service,\n          purchaseType,\n          quantity: 1\n        });\n      }\n    },\n    REMOVE_FROM_CART(state, cartItemId) {\n      state.items = state.items.filter(item => item.id !== cartItemId);\n    },\n    UPDATE_QUANTITY(state, {\n      cartItemId,\n      quantity\n    }) {\n      const item = state.items.find(item => item.id === cartItemId);\n      if (item) {\n        item.quantity = quantity;\n      }\n    },\n    CLEAR_CART(state) {\n      state.items = [];\n    }\n  },\n  actions: {\n    addToCart({\n      commit\n    }, payload) {\n      commit('ADD_TO_CART', payload);\n    },\n    removeFromCart({\n      commit\n    }, cartItemId) {\n      commit('REMOVE_FROM_CART', cartItemId);\n    },\n    updateQuantity({\n      commit\n    }, payload) {\n      commit('UPDATE_QUANTITY', payload);\n    },\n    clearCart({\n      commit\n    }) {\n      commit('CLEAR_CART');\n    }\n  },\n  getters: {\n    cartItems: state => state.items,\n    cartTotal: state => {\n      return state.items.reduce((total, item) => {\n        const price = item.service.discountedPrice || item.service.price;\n        return total + price * item.quantity;\n      }, 0);\n    },\n    cartItemCount: state => {\n      return state.items.reduce((count, item) => count + item.quantity, 0);\n    },\n    hasSubscriptionItems: state => {\n      return state.items.some(item => item.purchaseType === 'subscription');\n    }\n  }\n};","map":{"version":3,"names":["namespaced","state","items","mutations","ADD_TO_CART","payload","service","purchaseType","existingItemIndex","findIndex","item","id","quantity","push","Date","now","REMOVE_FROM_CART","cartItemId","filter","UPDATE_QUANTITY","find","CLEAR_CART","actions","addToCart","commit","removeFromCart","updateQuantity","clearCart","getters","cartItems","cartTotal","reduce","total","price","discountedPrice","cartItemCount","count","hasSubscriptionItems","some"],"sources":["/home/dennis/medport/frontend/src/store/modules/cart.js"],"sourcesContent":["export default {\n    namespaced: true,\n    state: {\n      items: []\n    },\n    mutations: {\n      ADD_TO_CART(state, payload) {\n        const { service, purchaseType } = payload;\n        \n        // Check if item already exists in cart\n        const existingItemIndex = state.items.findIndex(\n          item => item.service.id === service.id && item.purchaseType === purchaseType\n        );\n        \n        if (existingItemIndex !== -1) {\n          // Update quantity if item exists\n          state.items[existingItemIndex].quantity += 1;\n        } else {\n          // Add new item if it doesn't exist\n          state.items.push({\n            id: Date.now(), // Unique ID for cart item\n            service,\n            purchaseType,\n            quantity: 1\n          });\n        }\n      },\n      REMOVE_FROM_CART(state, cartItemId) {\n        state.items = state.items.filter(item => item.id !== cartItemId);\n      },\n      UPDATE_QUANTITY(state, { cartItemId, quantity }) {\n        const item = state.items.find(item => item.id === cartItemId);\n        if (item) {\n          item.quantity = quantity;\n        }\n      },\n      CLEAR_CART(state) {\n        state.items = [];\n      }\n    },\n    actions: {\n      addToCart({ commit }, payload) {\n        commit('ADD_TO_CART', payload);\n      },\n      removeFromCart({ commit }, cartItemId) {\n        commit('REMOVE_FROM_CART', cartItemId);\n      },\n      updateQuantity({ commit }, payload) {\n        commit('UPDATE_QUANTITY', payload);\n      },\n      clearCart({ commit }) {\n        commit('CLEAR_CART');\n      }\n    },\n    getters: {\n      cartItems: state => state.items,\n      cartTotal: state => {\n        return state.items.reduce((total, item) => {\n          const price = item.service.discountedPrice || item.service.price;\n          return total + (price * item.quantity);\n        }, 0);\n      },\n      cartItemCount: state => {\n        return state.items.reduce((count, item) => count + item.quantity, 0);\n      },\n      hasSubscriptionItems: state => {\n        return state.items.some(item => item.purchaseType === 'subscription');\n      }\n    }\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}